worker_processes  1;
# error_log  logs/debug.log debug;
user root;
events {
    worker_connections  1024;
}

env OPENAI_API_HOST;
env OPENAI_MODEL;
env OPENAI_VISION_API_HOST;
env OPENAI_VISION_MODEL;
env OPENAI_EMBEDDING_API_HOST;
env OPENAI_EMBEDDING_MODEL;

http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
    fastcgi_intercept_errors on;
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    client_max_body_size 20m;
    client_body_buffer_size 20m;
    proxy_buffer_size 20m;
    proxy_buffers 4 20m;
    proxy_busy_buffers_size 20m;
    proxy_request_buffering on;
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    resolver 8.8.8.8;

    lua_need_request_body on;
    lua_shared_dict discovery 1m;
    lua_shared_dict jwks 1m;
    real_ip_header     X-Forwarded-For;
    real_ip_recursive on;
    lua_package_path '/opt/app/?.lua;;';
    lua_ssl_verify_depth 3;

    server {
        listen    80;
        server_name  127.0.0.1;
        charset utf-8;
        default_type text/html;

        set $session_check_ssi off;
        set $session_name model_api_proxy_session;
        set $session_secret 623q4hR325t36VsCD3g567922IC0073T;

        # 配置允许的API Keys（用逗号分隔）
	      set $valid_api_keys "sk-ZQS9Ucv1ZP7mkQ7F9V2tPNUFHjz2VY4JBm07eDdU8DYJG,sk-Z3Hr1Cb4m06AVKW4zsJ5uHj712RHiJKvfA5rPBU45Zqz2";

        # 初始化upstream变量
        set $upstream '';

        location / {
            access_by_lua '
                -- 认证验证逻辑
                local valid_keys = {}
                for k in string.gmatch(ngx.var.valid_api_keys, "([^,]+)") do
                    valid_keys[k] = true
                end

                local auth_header = ngx.req.get_headers()["Authorization"]
                if not auth_header then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say("{\\"error\\": \\"Missing Authorization header\\"}")
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local _, _, api_key = string.find(auth_header, "Bearer%s+(.+)")
                if not api_key then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say("{\\"error\\": \\"Invalid Authorization format\\"}")
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                if not valid_keys[api_key] then
                    ngx.status = ngx.HTTP_FORBIDDEN
                    ngx.say("{\\"error\\": \\"Invalid API Key\\"}")
                    return ngx.exit(ngx.HTTP_FORBIDDEN)
                end

                ngx.req.set_header("Authorization", nil)

                -- 模型选择逻辑
                if ngx.req.get_method() == "POST" then
                    local OPENAI_MODELS = {
                        ["gpt-3.5-turbo"] = {model = os.getenv("OPENAI_MODEL"), host = os.getenv("OPENAI_API_HOST")},
			                  ["DeepSeek-R1-32B"] = {model = os.getenv("OPENAI_MODEL"), host = os.getenv("OPENAI_API_HOST")},
                        ["gpt-4o-mini"] = {model = os.getenv("OPENAI_VISION_MODEL"), host = os.getenv("OPENAI_VISION_API_HOST")},
                        ["text-embedding-ada-002"] = {model = os.getenv("OPENAI_EMBEDDING_MODEL"), host = os.getenv("OPENAI_EMBEDDING_API_HOST")}
                    }

                    ngx.req.read_body()
                    local data = ngx.req.get_body_data()

                    if data then
                        local json = require("cjson")
                        local decoded_data = json.decode(data)

                        if decoded_data and OPENAI_MODELS[decoded_data["model"]] then
                            local selected_model = OPENAI_MODELS[decoded_data["model"]]
                            decoded_data["model"] = selected_model.model
                            data = json.encode(decoded_data)

                            ngx.req.set_body_data(data)
                            ngx.req.set_header("Content-Length", string.len(data))
                            ngx.var.upstream = selected_model.host
                        else
                            ngx.log(ngx.ERR, "Model not found or invalid request data")
                            ngx.var.upstream = os.getenv("OPENAI_API_HOST")  -- 设置默认上游
                        end
                    end
                end

                if ngx.req.get_method() == "GET" then
                    ngx.var.upstream = os.getenv("OPENAI_API_HOST")
                end

                if ngx.var.upstream == "" or ngx.var.upstream == nil then
                    ngx.log(ngx.ERR, "Upstream not configured")
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
            ';

            proxy_redirect off;
            proxy_set_header  Host  $http_host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_http_version 1.1;
            proxy_cache off;
            proxy_buffering off;
            chunked_transfer_encoding on;
            tcp_nopush on;
            tcp_nodelay on;
            keepalive_timeout 300;

            proxy_pass http://$upstream;
        }
    }
}

